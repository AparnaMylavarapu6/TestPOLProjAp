// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.ResidentAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ResidentOccupancy", SourceFile="Tests\\Resident API\\ResidentOccupancy.feature", SourceLine=0)]
    public partial class ResidentOccupancyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ResidentOccupancy.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ResidentOccupancy", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post ResidentOccupancy details", new string[] {
                "mytag"}, SourceLine=4)]
        public virtual void PostResidentOccupancyDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ResidentOccupancy details", new string[] {
                        "mytag"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "resType",
                        "locationID",
                        "leaseStartDate",
                        "leaseEndDate"});
            table129.AddRow(new string[] {
                        "1",
                        "2484631",
                        "9/20/2018 12:00:00 AM",
                        "9/20/2019 12:00:00 AM"});
#line 6
 testRunner.Given("I have to Post ResidentOccupancy details", ((string)(null)), table129, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "firstName",
                        "middleName",
                        "lastName"});
            table130.AddRow(new string[] {
                        "John",
                        "kennith",
                        "roy"});
#line 9
 testRunner.And("I have provided Residents Name Information.", ((string)(null)), table130, "And ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "externalResID",
                        "residentID",
                        "isPrimaryResident",
                        "dateofBirth",
                        "email",
                        "mobileNumber"});
            table131.AddRow(new string[] {
                        "170",
                        "0",
                        "true",
                        "1976-06-25T00:00:00",
                        "John@roy.com",
                        "5896568741"});
#line 12
 testRunner.And("Provided additional Resident details", ((string)(null)), table131, "And ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "addressLine1",
                        "addressLine2",
                        "city",
                        "state",
                        "zipCode"});
            table132.AddRow(new string[] {
                        "1126 Orchid Cir #",
                        "",
                        "Bellport",
                        "NY",
                        "11713"});
#line 15
 testRunner.And("I have provided Mailing Address Information.", ((string)(null)), table132, "And ");
#line 18
 testRunner.When("I send a Post request to insert the ResidentOccupancy details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("The ResidentOccupancy details should be posted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
