// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.ResidentAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Residents", SourceFile="Tests\\Resident API\\Residents.feature", SourceLine=0)]
    public partial class ResidentsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Residents.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Residents", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Resident Information", SourceLine=5)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void GetResidentInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Resident Information", new string[] {
                        "ignore"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "residentid"});
            table122.AddRow(new string[] {
                        ""});
#line 8
testRunner.Given("I have a valid residentid to fetch the resident information", ((string)(null)), table122, "Given ");
#line 11
testRunner.When("I send a valid Get Request to fetch the resident information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
testRunner.Then("A valid resident information response should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Resident Information", SourceLine=15)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void DeleteResidentInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Resident Information", new string[] {
                        "ignore"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "residentid"});
            table123.AddRow(new string[] {
                        ""});
#line 18
testRunner.Given("I have a valid residentid to delete the resident information", ((string)(null)), table123, "Given ");
#line 21
testRunner.When("I send a valid Delete Request to delete the resident information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
testRunner.Then("A valid response for the delete operation should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Resident Information", SourceLine=26)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void PostResidentInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Resident Information", new string[] {
                        "ignore"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "residentType",
                        "fristName",
                        "middleName",
                        "lastName",
                        "email",
                        "mobileNumber",
                        "extResidentID",
                        "dateOfBirth",
                        "mailingAddressValidated"});
            table124.AddRow(new string[] {
                        "LeasingDesk",
                        "Chris",
                        "S",
                        "Thomas",
                        "a@a.com",
                        "9877666555555",
                        "t123456",
                        "03/03/1980",
                        "true"});
#line 29
testRunner.Given("I have the resident details for Post operation", ((string)(null)), table124, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "addressLine1",
                        "addressLine2",
                        "city",
                        "state",
                        "postalCode"});
            table125.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 34
testRunner.And("I have the mailing address details", ((string)(null)), table125, "And ");
#line 39
testRunner.When("I Send a Post Request to the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
testRunner.Then("The success response should be generated for the post operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
