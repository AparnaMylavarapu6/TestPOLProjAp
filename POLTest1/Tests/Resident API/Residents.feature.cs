// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.ResidentAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Residents", SourceFile="Tests\\Resident API\\Residents.feature", SourceLine=0)]
    public partial class ResidentsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Residents.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Residents", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Resident details", new string[] {
                "mytag"}, SourceLine=4)]
        public virtual void GetResidentDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Resident details", new string[] {
                        "mytag"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResidentID"});
            table133.AddRow(new string[] {
                        "8522"});
#line 6
 testRunner.Given("I have resident details", ((string)(null)), table133, "Given ");
#line 9
 testRunner.When("I pass the residentid for a get request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("the resident details should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Resident details", new string[] {
                "mytag"}, SourceLine=12)]
        public virtual void DeleteResidentDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Resident details", new string[] {
                        "mytag"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        "ResidentID"});
            table134.AddRow(new string[] {
                        "8521"});
#line 14
 testRunner.Given("I have to Delete resident details", ((string)(null)), table134, "Given ");
#line 17
 testRunner.When("I pass the residnet id for a delete request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the Delete resident details should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Resident details", new string[] {
                "mytag"}, SourceLine=20)]
        public virtual void PostResidentDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Resident details", new string[] {
                        "mytag"});
#line 21
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "resType",
                        "locationID",
                        "leaseStartDate",
                        "leaseEndDate",
                        "createdDate"});
            table135.AddRow(new string[] {
                        "1",
                        "1",
                        "2018-09-14T11:29:12.862Z",
                        "2018-09-14T11:29:12.862Z",
                        "2018-09-14T11:29:12.862Z"});
#line 22
 testRunner.Given("I have to Post new resident details", ((string)(null)), table135, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        "firstName",
                        "middleName",
                        "lastName"});
            table136.AddRow(new string[] {
                        "113",
                        "true",
                        "1234"});
#line 25
 testRunner.And("I have provided Residents Information.", ((string)(null)), table136, "And ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "externalResID",
                        "residentID",
                        "isPrimaryResident",
                        "dateofBirth",
                        "email",
                        "mobileNumber"});
            table137.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 28
 testRunner.And("Provided additional Resident details          |", ((string)(null)), table137, "And ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        "addressLine1",
                        "addressLine2",
                        "city",
                        "state",
                        "zipCode"});
            table138.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 31
 testRunner.And("I have provided Mailing Address Information.", ((string)(null)), table138, "And ");
#line 34
 testRunner.When("I pass the resident id for a post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("the post resident details should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Put Resident details", new string[] {
                "mytag"}, SourceLine=37)]
        public virtual void PutResidentDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Resident details", new string[] {
                        "mytag"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "resType",
                        "locationID",
                        "leaseStartDate",
                        "leaseEndDate",
                        "createdDate"});
            table139.AddRow(new string[] {
                        "1",
                        "1",
                        "2018-09-14T11:29:12.862Z",
                        "2018-09-14T11:29:12.862Z",
                        "2018-09-14T11:29:12.862Z"});
#line 39
 testRunner.Given("I have to update resident details", ((string)(null)), table139, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        "firstName",
                        "middleName",
                        "lastName"});
            table140.AddRow(new string[] {
                        "113",
                        "true",
                        "1234"});
#line 42
 testRunner.And("I have provided Residents Information.", ((string)(null)), table140, "And ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "externalResID",
                        "residentID",
                        "isPrimaryResident",
                        "dateofBirth",
                        "email",
                        "mobileNumber"});
            table141.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 45
 testRunner.And("Provided additional Resident details          |", ((string)(null)), table141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "addressLine1",
                        "addressLine2",
                        "city",
                        "state",
                        "zipCode"});
            table142.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 48
 testRunner.And("I have provided Mailing Address Information.", ((string)(null)), table142, "And ");
#line 51
 testRunner.When("I send a Put request to insert the Occupancy details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.When("I pass the resident id for a put request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("the put resident details should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
