// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.ResidentAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Occupancy", SourceFile="Tests\\Resident API\\Occupancy.feature", SourceLine=0)]
    public partial class OccupancyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Occupancy.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Occupancy", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Occupancy details", new string[] {
                "happypath"}, SourceLine=3)]
        public virtual void GetOccupancyDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Occupancy details", new string[] {
                        "happypath"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "OccupancyID"});
            table121.AddRow(new string[] {
                        "336539"});
#line 5
 testRunner.Given("I have OccupancyID details", ((string)(null)), table121, "Given ");
#line 8
 testRunner.When("I pass the OccupancyID for a get request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("the Occupant details should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Occupancy details", new string[] {
                "happypath"}, SourceLine=11)]
        public virtual void DeleteOccupancyDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Occupancy details", new string[] {
                        "happypath"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "OccupancyID"});
            table122.AddRow(new string[] {
                        "336613"});
#line 13
 testRunner.Given("I have request to delete Occupancy details", ((string)(null)), table122, "Given ");
#line 16
 testRunner.When("I pass the OccupancyID for a Delete request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the Occupant details will be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Occupancy details", new string[] {
                "happypath"}, SourceLine=19)]
        public virtual void PostOccupancyDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Occupancy details", new string[] {
                        "happypath"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "occupancyGroupId",
                        "locationID",
                        "leaseStartDate",
                        "leaseEndDate",
                        "createdDate"});
            table123.AddRow(new string[] {
                        "1",
                        "1",
                        "2018-09-14T11:29:12.862Z",
                        "2018-12-14T11:29:12.862Z",
                        "2018-09-14T11:29:12.862Z"});
#line 21
 testRunner.Given("I have request to Post Occupancy details", ((string)(null)), table123, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "residentId",
                        "isPrimary",
                        "occupancyID"});
            table124.AddRow(new string[] {
                        "113",
                        "true",
                        "1234"});
#line 24
 testRunner.And("I have provided Residents Information.", ((string)(null)), table124, "And ");
#line 27
 testRunner.When("I send a Post request to insert the Occupancy details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("the Occupant details will be added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Put Occupancy details", new string[] {
                "happypath"}, SourceLine=30)]
        public virtual void PutOccupancyDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Occupancy details", new string[] {
                        "happypath"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "occupancyGroupId",
                        "locationID",
                        "leaseStartDate",
                        "leaseEndDate",
                        "createdDate"});
            table125.AddRow(new string[] {
                        "1",
                        "1",
                        "2018-09-14T11:29:12.862Z",
                        "2018-09-14T11:29:12.862Z",
                        "2018-09-14T11:29:12.862Z"});
#line 32
 testRunner.Given("I have request to PUT Occupancy details", ((string)(null)), table125, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "residentId",
                        "isPrimary",
                        "occupancyID"});
            table126.AddRow(new string[] {
                        "113",
                        "true",
                        "1234"});
#line 35
 testRunner.And("I have provided Residents Information for PUT Request.", ((string)(null)), table126, "And ");
#line 38
 testRunner.When("I send a Put request to insert the Occupancy details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("the Occupant details will be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
