// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.PolicyAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("HO4Policy", SourceFile="Tests\\Policy API\\HO4Policy.feature", SourceLine=0)]
    public partial class HO4PolicyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HO4Policy.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HO4Policy", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Policy Details", new string[] {
                "needtorunfordev"}, SourceLine=4)]
        public virtual void GetPolicyDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Policy Details", new string[] {
                        "needtorunfordev"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid"});
            table47.AddRow(new string[] {
                        ""});
#line 7
testRunner.Given("I have provided a policyid to fetch the policy details", ((string)(null)), table47, "Given ");
#line 11
testRunner.When("I send a Get request to the web API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
testRunner.Then("The policy information should be fetched successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Policy Details", new string[] {
                "notimplementedindev"}, SourceLine=15)]
        public virtual void DeletePolicyDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Policy Details", new string[] {
                        "notimplementedindev"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid"});
            table48.AddRow(new string[] {
                        ""});
#line 18
testRunner.Given("I have provided a valid policyid to delete the policy details", ((string)(null)), table48, "Given ");
#line 22
testRunner.When("I send a valid Delete request with the policyid to the web API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
testRunner.Then("The policy information should be removed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Policy Information", new string[] {
                "needtorunfordev"}, SourceLine=27)]
        public virtual void PostPolicyInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Policy Information", new string[] {
                        "needtorunfordev"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyId",
                        "quoteId",
                        "policyNumber",
                        "policySource",
                        "policyStatus",
                        "effectiveDate",
                        "expiryDate",
                        "createdById",
                        "modifiedBy",
                        "carrier",
                        "productID"});
            table49.AddRow(new string[] {
                        "0",
                        "123546",
                        "0236265244",
                        "1",
                        "1",
                        "2018-06-25T16:25:43.0017085-05:00",
                        "2019-06-25T16:25:43.0017099-05:00",
                        "0",
                        "2",
                        "AMIG",
                        "104"});
#line 30
testRunner.Given("I have provided the policy details to post the information", ((string)(null)), table49, "Given ");
#line 35
testRunner.When("I send a valid Post Request to the Web API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
testRunner.Then("The policy information should be posted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Put Policy Information", new string[] {
                "needtorunfordev"}, SourceLine=40)]
        public virtual void PutPolicyInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Policy Information", new string[] {
                        "needtorunfordev"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyId",
                        "quoteId",
                        "policyNumber",
                        "policySource",
                        "policyStatus",
                        "effectiveDate",
                        "expiryDate",
                        "createdById",
                        "modifiedBy",
                        "carrier",
                        "productID"});
            table50.AddRow(new string[] {
                        "0",
                        "123546",
                        "0236265244",
                        "1",
                        "1",
                        "2018-06-25T16:25:43.0017085-05:00",
                        "2019-06-25T16:25:43.0017099-05:00",
                        "0",
                        "2",
                        "AMIG",
                        "104"});
#line 43
testRunner.Given("I have provided the policy details to update the policy information", ((string)(null)), table50, "Given ");
#line 48
testRunner.When("I send a valid Put Request to the Web API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
testRunner.Then("The policy information should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
