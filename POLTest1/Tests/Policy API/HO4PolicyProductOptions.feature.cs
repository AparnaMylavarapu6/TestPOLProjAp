// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.PolicyAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("HO4PolicyProductOptions", SourceFile="Tests\\Policy API\\HO4PolicyProductOptions.feature", SourceLine=0)]
    public partial class HO4PolicyProductOptionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HO4PolicyProductOptions.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HO4PolicyProductOptions", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Policy Product Options", new string[] {
                "happypath"}, SourceLine=4)]
        public virtual void GetPolicyProductOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Policy Product Options", new string[] {
                        "happypath"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid"});
            table61.AddRow(new string[] {
                        "123456"});
#line 6
 testRunner.Given("I have provided the policy id to fetch Policy Product Options", ((string)(null)), table61, "Given ");
#line 10
 testRunner.When("I send a Get request to fetch the product options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("A successful response code should be generated with the product option informatio" +
                    "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Policy Product Options", new string[] {
                "happypath"}, SourceLine=13)]
        public virtual void DeletePolicyProductOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Policy Product Options", new string[] {
                        "happypath"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid"});
            table62.AddRow(new string[] {
                        "123456"});
#line 15
 testRunner.Given("I have provided the policy id to delete Policy Product Options", ((string)(null)), table62, "Given ");
#line 19
 testRunner.When("I send a Delete request to delete the product options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("A successful response code should be generated with the delete option being succe" +
                    "ssful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Policy Product Options", new string[] {
                "needtoupdate"}, SourceLine=22)]
        public virtual void PostPolicyProductOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Policy Product Options", new string[] {
                        "needtoupdate"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "paoid",
                        "effdate",
                        "expdate",
                        "noOfIncrements"});
            table63.AddRow(new string[] {
                        "1234",
                        "0",
                        "",
                        "",
                        "0"});
            table63.AddRow(new string[] {
                        "1234",
                        "1",
                        "",
                        "",
                        "0"});
            table63.AddRow(new string[] {
                        "1234",
                        "2",
                        "",
                        "",
                        "0"});
            table63.AddRow(new string[] {
                        "3456",
                        "0",
                        "",
                        "",
                        "0"});
            table63.AddRow(new string[] {
                        "3456",
                        "1",
                        "",
                        "",
                        "0"});
#line 24
 testRunner.Given("I have provided the Product Options List to post the product options", ((string)(null)), table63, "Given ");
#line 33
 testRunner.When("I send a Post request with the product options list and the policy id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("A successful response code should be generated with the product option informatio" +
                    "n successfully posted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Put Policy Product Options", new string[] {
                "needtoupdate"}, SourceLine=36)]
        public virtual void PutPolicyProductOptions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Policy Product Options", new string[] {
                        "needtoupdate"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "paoid",
                        "effdate",
                        "expdate",
                        "noOfIncrements"});
            table64.AddRow(new string[] {
                        "1234",
                        "0",
                        "",
                        "",
                        "0"});
            table64.AddRow(new string[] {
                        "1234",
                        "1",
                        "",
                        "",
                        "0"});
            table64.AddRow(new string[] {
                        "1234",
                        "2",
                        "",
                        "",
                        "0"});
            table64.AddRow(new string[] {
                        "3456",
                        "0",
                        "",
                        "",
                        "0"});
            table64.AddRow(new string[] {
                        "3456",
                        "1",
                        "",
                        "",
                        "0"});
#line 38
 testRunner.Given("I have provided the Product Options List to insert or update the product options", ((string)(null)), table64, "Given ");
#line 46
 testRunner.When("I send a Put request with the product options list and the policy id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("A successful response code should be generated with the product option informatio" +
                    "n successfully inserted or updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
