// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.PolicyAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("HO4PolicyLocation", SourceFile="Tests\\Policy API\\HO4PolicyLocation.feature", SourceLine=0)]
    public partial class HO4PolicyLocationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HO4PolicyLocation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HO4PolicyLocation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Policy Location by PolicyId", new string[] {
                "happypath"}, SourceLine=4)]
        public virtual void GetPolicyLocationByPolicyId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Policy Location by PolicyId", new string[] {
                        "happypath"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid"});
            table51.AddRow(new string[] {
                        "6130581"});
#line 6
 testRunner.Given("I have entered the policyid to fetch the policy locations", ((string)(null)), table51, "Given ");
#line 10
 testRunner.When("I send a Get request to getpolicylocation method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("The policy location should be fetched successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Policy Location by policyid", new string[] {
                "notimplementedindev"}, SourceLine=13)]
        public virtual void DeletePolicyLocationByPolicyid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Policy Location by policyid", new string[] {
                        "notimplementedindev"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid"});
            table52.AddRow(new string[] {
                        "6130588"});
#line 15
 testRunner.Given("I have entered the policyid to delete the policy locations", ((string)(null)), table52, "Given ");
#line 19
 testRunner.When("I send a Delete request to deletepolicylocation method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("The policy location should be deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Policy Location by locationid", new string[] {
                "happypath"}, SourceLine=22)]
        public virtual void GetPolicyLocationByLocationid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Policy Location by locationid", new string[] {
                        "happypath"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "locationid"});
            table53.AddRow(new string[] {
                        "222994"});
#line 24
 testRunner.Given("I have entered the locationid to fetch the policy locations", ((string)(null)), table53, "Given ");
#line 28
 testRunner.When("I send a Get request with the locationid to fetch policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("The policies should be fetched successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Policy Location by locationid", new string[] {
                "notimplementedindev"}, SourceLine=32)]
        public virtual void DeletePolicyLocationByLocationid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Policy Location by locationid", new string[] {
                        "notimplementedindev"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "locationid"});
            table54.AddRow(new string[] {
                        "5322151"});
#line 34
 testRunner.Given("I have entered the locationid to delete the policy locations", ((string)(null)), table54, "Given ");
#line 38
 testRunner.When("I send a Delete request with the locationid to delete policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("The policies should be deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Policy Location", new string[] {
                "happypath"}, SourceLine=41)]
        public virtual void PostPolicyLocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Policy Location", new string[] {
                        "happypath"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyId",
                        "locationID",
                        "TransferEffectiveDate",
                        "makeVaccant",
                        "active"});
            table55.AddRow(new string[] {
                        "0",
                        "0",
                        "",
                        "true",
                        "true"});
#line 43
testRunner.Given("I have entered the Policy Location information", ((string)(null)), table55, "Given ");
#line 47
testRunner.When("I send a Post request to insert the policy location information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
testRunner.Then("The policy location information should be inserted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Put Policy Location", new string[] {
                "happypath"}, SourceLine=50)]
        public virtual void PutPolicyLocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Policy Location", new string[] {
                        "happypath"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyId",
                        "locationID",
                        "TransferEffectiveDate",
                        "makeVaccant",
                        "active"});
            table56.AddRow(new string[] {
                        "0",
                        "0",
                        "",
                        "true",
                        "true"});
#line 52
testRunner.Given("I have provided the Policy Location information", ((string)(null)), table56, "Given ");
#line 56
testRunner.When("I send a Put request to insert or update the policy location information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
testRunner.Then("The policy location information should be updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
