// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.PolicyAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("HO4PolicyPaperLess", SourceFile="Tests\\Policy API\\HO4PolicyPaperLess.feature", SourceLine=0)]
    public partial class HO4PolicyPaperLessFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "HO4PolicyPaperLess.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "HO4PolicyPaperLess", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post the Policy PaperLess information", new string[] {
                "needtoupdate"}, SourceLine=4)]
        public virtual void PostThePolicyPaperLessInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post the Policy PaperLess information", new string[] {
                        "needtoupdate"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "isPaperLess",
                        "vendorSentDate"});
            table56.AddRow(new string[] {
                        "0",
                        "true",
                        ""});
#line 6
 testRunner.Given("I have entered the policy information for the post paperless operation", ((string)(null)), table56, "Given ");
#line 10
 testRunner.When("I send a Post request with the given inputs to the post paperless method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("A successful response should be generated for the post operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post or Update the Policy PaperLess information", new string[] {
                "needtoupdate"}, SourceLine=14)]
        public virtual void PostOrUpdateThePolicyPaperLessInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post or Update the Policy PaperLess information", new string[] {
                        "needtoupdate"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "isPaperLess",
                        "vendorSentDate"});
            table57.AddRow(new string[] {
                        "0",
                        "true",
                        ""});
#line 16
 testRunner.Given("I have entered the policy information for the put paperless operation", ((string)(null)), table57, "Given ");
#line 20
 testRunner.When("I send a Put request with the given inputs to the put paperless method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("A successful response should be generated for the put operation and the informati" +
                    "on should be updated or inserted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Fetch the policy paperless information with the policyid as input", new string[] {
                "happypath"}, SourceLine=26)]
        public virtual void FetchThePolicyPaperlessInformationWithThePolicyidAsInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch the policy paperless information with the policyid as input", new string[] {
                        "happypath"});
#line 27
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "policyPaperLessPolicyid"});
            table58.AddRow(new string[] {
                        "123123",
                        "234234"});
            table58.AddRow(new string[] {
                        "131415",
                        ""});
#line 29
testRunner.Given("I have provided the policy id as input for fetching the policy paperless informat" +
                    "ion", ((string)(null)), table58, "Given ");
#line 34
testRunner.When("I send a Get request to fetch the policy paperless information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
testRunner.Then("A successful response should be generated with the policy paperless information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete the policy paperless information with the policyid as input", new string[] {
                "happypath"}, SourceLine=40)]
        public virtual void DeleteThePolicyPaperlessInformationWithThePolicyidAsInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete the policy paperless information with the policyid as input", new string[] {
                        "happypath"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "policyPaperLessPolicyid"});
            table59.AddRow(new string[] {
                        "123123",
                        "234234"});
            table59.AddRow(new string[] {
                        "131415",
                        ""});
#line 43
testRunner.Given("I have provided the policy id as input for deleting the policy paperless informat" +
                    "ion", ((string)(null)), table59, "Given ");
#line 48
testRunner.When("I send a Delete request to delete the policy paperless information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
testRunner.Then("A successful response should be generated for the delete policy paperless method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
