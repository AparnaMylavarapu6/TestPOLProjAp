// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.PolicyAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ThirdPartyPolicy", SourceFile="Tests\\Policy API\\ThirdPartyPolicy.feature", SourceLine=0)]
    public partial class ThirdPartyPolicyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ThirdPartyPolicy.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ThirdPartyPolicy", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post ThirdParty Policy", new string[] {
                "needtorunfordev"}, SourceLine=5)]
        public virtual void PostThirdPartyPolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post ThirdParty Policy", new string[] {
                        "needtorunfordev"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "policystatus",
                        "policynumber",
                        "policysource",
                        "effectivedate",
                        "expirydate",
                        "createdbyid",
                        "modifiedby",
                        "liabilitylimit",
                        "carrierid",
                        "isCorporate"});
            table77.AddRow(new string[] {
                        "0",
                        "0",
                        "1125dddThirdparty",
                        "1",
                        "2018-07-02T11:47:05.8374812-05:00",
                        "2019-07-02T11:47:05.8374844-05:00",
                        "-3",
                        "-3",
                        "100000",
                        "65",
                        "false"});
#line 7
 testRunner.Given("I have entered the ThirdParty policy information", ((string)(null)), table77, "Given ");
#line 11
 testRunner.When("I send a Post request with the policy information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
 testRunner.Then("A valid successful response should be generated with the policy information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Put ThirdParty Policy", new string[] {
                "needtorunfordev"}, SourceLine=16)]
        public virtual void PutThirdPartyPolicy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put ThirdParty Policy", new string[] {
                        "needtorunfordev"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "policystatus",
                        "policynumber",
                        "policysource",
                        "effectivedate",
                        "expirydate",
                        "createdbyid",
                        "modifiedby",
                        "liabilitylimit",
                        "carrierid",
                        "isCorporate"});
            table78.AddRow(new string[] {
                        "0",
                        "0",
                        "1125dddThirdparty",
                        "1",
                        "2018-07-02T11:47:05.8374812-05:00",
                        "2019-07-02T11:47:05.8374844-05:00",
                        "-3",
                        "-3",
                        "100000",
                        "65",
                        "false"});
#line 18
 testRunner.Given("I have entered the new or updated ThirdParty policy information", ((string)(null)), table78, "Given ");
#line 22
 testRunner.When("I send a Put request with the policy information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("A valid successful response should be generated with the new or updated policy in" +
                    "formation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Fetch the ThirdParty policy information with the policy id as input", new string[] {
                "needtorunfordev"}, SourceLine=27)]
        public virtual void FetchTheThirdPartyPolicyInformationWithThePolicyIdAsInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch the ThirdParty policy information with the policy id as input", new string[] {
                        "needtorunfordev"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid"});
            table79.AddRow(new string[] {
                        "6130579"});
#line 30
testRunner.Given("I have provided the policy id as an input to fetch the policy information", ((string)(null)), table79, "Given ");
#line 34
testRunner.When("I send a Get request with the policy id as input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
testRunner.Then("A successful response should be generated with the third party policy information" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete the ThirdParty policy information with the policy id as input", new string[] {
                "needtorunfordev"}, SourceLine=40)]
        public virtual void DeleteTheThirdPartyPolicyInformationWithThePolicyIdAsInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete the ThirdParty policy information with the policy id as input", new string[] {
                        "needtorunfordev"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "thirdpartypolicyid"});
            table80.AddRow(new string[] {
                        "1234",
                        ""});
            table80.AddRow(new string[] {
                        "2345",
                        "3456"});
#line 43
testRunner.Given("I have provided the policy id as an input to delete the policy information", ((string)(null)), table80, "Given ");
#line 48
testRunner.When("I send a Delete request with the policy id as input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
testRunner.Then("A successful response should be generated with the delete operation being success" +
                    "fully done", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
