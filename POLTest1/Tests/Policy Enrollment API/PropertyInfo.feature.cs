// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.PolicyEnrollmentAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("PropertyInfo", SourceFile="Tests\\Policy Enrollment API\\PropertyInfo.feature", SourceLine=0)]
    public partial class PropertyInfoFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PropertyInfo.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PropertyInfo", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Property Status", new string[] {
                "needtorunfordev"}, SourceLine=4)]
        public virtual void GetPropertyStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Property Status", new string[] {
                        "needtorunfordev"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "propertyIdType",
                        "propertyID"});
            table110.AddRow(new string[] {
                        "LeasingDesk",
                        "156"});
#line 6
 testRunner.Given("I have entered the property type information", ((string)(null)), table110, "Given ");
#line 9
 testRunner.When("I send a POST request with the property type information input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("A successful property status response should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get property addresses", new string[] {
                "needtorunfordev"}, SourceLine=13)]
        public virtual void GetPropertyAddresses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get property addresses", new string[] {
                        "needtorunfordev"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "propertyIDType",
                        "propertyID"});
            table111.AddRow(new string[] {
                        "LeasingDesk",
                        "156"});
            table111.AddRow(new string[] {
                        "OneSite",
                        "120"});
            table111.AddRow(new string[] {
                        "Yardi",
                        "120"});
            table111.AddRow(new string[] {
                        "MRI",
                        "120"});
#line 15
testRunner.Given("I have entered the property type information to the GetPropertyAddress method as " +
                    "input", ((string)(null)), table111, "Given ");
#line 22
testRunner.When("I send a POST request to the GetPropertyAddress method", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
testRunner.Then("A Valid Property Addresses response should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Widget Settings", new string[] {
                "needtorunfordev"}, SourceLine=25)]
        public virtual void GetWidgetSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Widget Settings", new string[] {
                        "needtorunfordev"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "userId",
                        "password"});
            table112.AddRow(new string[] {
                        "webservice@realpage.com",
                        "hgC2HfBd"});
#line 27
testRunner.Given("I have entered the authentication information", ((string)(null)), table112, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "propertyIdType",
                        "propertyID"});
            table113.AddRow(new string[] {
                        "LeasingDesk",
                        "156"});
#line 31
testRunner.And("I have entered the property information", ((string)(null)), table113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "UnitIDType",
                        "UnitID"});
            table114.AddRow(new string[] {
                        "Leasingdesk",
                        ""});
#line 35
testRunner.And("I have entered the unit information", ((string)(null)), table114, "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "firstName",
                        "middleName",
                        "lastName"});
            table115.AddRow(new string[] {
                        "Insurance",
                        "",
                        "PolicyEnroll"});
#line 39
testRunner.And("I have entered the Resident details", ((string)(null)), table115, "And ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "externalResID",
                        "isPrimaryResident",
                        "dateofBirth",
                        "email",
                        "mobileNumber"});
            table116.AddRow(new string[] {
                        "",
                        "true",
                        "1998-01-01",
                        "a@a.com",
                        "0000000000"});
#line 43
testRunner.And("I have entered the resident personal information", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "code",
                        "message"});
            table117.AddRow(new string[] {
                        "0",
                        ""});
#line 47
testRunner.And("I have entered the error code information", ((string)(null)), table117, "And ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "quoteRequestSource",
                        "leaseID",
                        "isRenewal",
                        "coverageDate"});
            table118.AddRow(new string[] {
                        "OLL Integration",
                        "234567",
                        "false",
                        "2018-04-27"});
#line 51
testRunner.And("I have entered other lease information", ((string)(null)), table118, "And ");
#line 55
testRunner.When("I send a POST request to fetch the widget settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
testRunner.Then("A valid settings response should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
