// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.PolicyEnrollmentAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("POL", SourceFile="Tests\\Policy Enrollment API\\POL.feature", SourceLine=0)]
    public partial class POLFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "POL.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "POL", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post POL Product Opt-in", new string[] {
                "needtorunfordev"}, SourceLine=4)]
        public virtual void PostPOLProductOpt_In()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post POL Product Opt-in", new string[] {
                        "needtorunfordev"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "propertyIdType",
                        "propertyID"});
            table105.AddRow(new string[] {
                        "LeasingDesk",
                        "156"});
#line 6
 testRunner.Given("I have provided the property information to post the  pol product opt-in", ((string)(null)), table105, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "quoteid",
                        "productrateid"});
            table106.AddRow(new string[] {
                        "2864963",
                        "183"});
#line 9
 testRunner.And("I have provided the quoteid and the productrateid", ((string)(null)), table106, "And ");
#line 13
 testRunner.When("I send a Post request to fetch the certificate number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("A valid certificate number should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Lease Approved - Activate POL Policy based on Lease Approval coming from Widget P" +
            "arnet application", new string[] {
                "removedscenario"}, SourceLine=17)]
        public virtual void LeaseApproved_ActivatePOLPolicyBasedOnLeaseApprovalComingFromWidgetParnetApplication()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lease Approved - Activate POL Policy based on Lease Approval coming from Widget P" +
                    "arnet application", new string[] {
                        "removedscenario"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        "userid",
                        "password"});
            table107.AddRow(new string[] {
                        "webservice@realpage.com",
                        "hgC2HfBd"});
#line 20
testRunner.Given("I have provided the authentication information for POL policy activation", ((string)(null)), table107, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "propertyIdType",
                        "propertyID"});
            table108.AddRow(new string[] {
                        "LeasingDesk",
                        "156"});
#line 24
testRunner.And("I have provided the property information for POL policy activation", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        "quoteRequestSource",
                        "extLeaseID",
                        "extUnitID",
                        "extResidentID"});
            table109.AddRow(new string[] {
                        "OLL Integration",
                        "234567",
                        "453256",
                        "1324556"});
#line 28
testRunner.And("I have provided the quote information for POL policy activation", ((string)(null)), table109, "And ");
#line 32
testRunner.When("I send a Post request for POL Policy Activation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
testRunner.Then("A valid success response should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
