// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.BillingAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Ledger", SourceFile="Tests\\Billing API\\Ledger.feature", SourceLine=0)]
    public partial class LedgerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Ledger.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ledger", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Fetch ledger information when ledgerid is provided", new string[] {
                "happypath"}, SourceLine=4)]
        public virtual void FetchLedgerInformationWhenLedgeridIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch ledger information when ledgerid is provided", new string[] {
                        "happypath"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgerid"});
            table20.AddRow(new string[] {
                        "12345"});
#line 6
 testRunner.Given("I have provided the ledgerid to fetch the ledger information", ((string)(null)), table20, "Given ");
#line 9
 testRunner.When("I send a Get request to fetch the ledger information for the provided ledgerid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("A success response code should be generated and the ledger information should be " +
                    "returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete ledger information when ledgerid is provided", new string[] {
                "notimplementedindev"}, SourceLine=14)]
        public virtual void DeleteLedgerInformationWhenLedgeridIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete ledger information when ledgerid is provided", new string[] {
                        "notimplementedindev"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgerid"});
            table21.AddRow(new string[] {
                        "12345"});
#line 16
 testRunner.Given("I have provided the ledgerid to delete the ledger information", ((string)(null)), table21, "Given ");
#line 19
 testRunner.When("I send a Delete request to delete the ledger information for the provided ledgeri" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("A success response code should be generated and the ledger information should be " +
                    "deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post the ledger information", new string[] {
                "happypath"}, SourceLine=22)]
        public virtual void PostTheLedgerInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post the ledger information", new string[] {
                        "happypath"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgerID",
                        "groupPolicyID",
                        "groupPolicyNumber",
                        "certificateNumber",
                        "locationID",
                        "AnnualPremium",
                        "ledgerEffectiveDate",
                        "ledgerEndDate",
                        "policyStatusID",
                        "productRateID",
                        "quoteID"});
            table22.AddRow(new string[] {
                        "12345",
                        "0",
                        "",
                        "",
                        "0",
                        "0",
                        "2018-08-28T12:12:08.041Z",
                        "2018-08-28T12:12:08.041Z",
                        "0",
                        "0",
                        "0"});
#line 24
 testRunner.Given("I have provided the ledger information to post the data", ((string)(null)), table22, "Given ");
#line 27
 testRunner.When("I send a Post request to insert the ledger information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("A success response should be generated and the ledger information should be inser" +
                    "ted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Insert or update the ledger information", new string[] {
                "happypath"}, SourceLine=31)]
        public virtual void InsertOrUpdateTheLedgerInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert or update the ledger information", new string[] {
                        "happypath"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgerID",
                        "groupPolicyID",
                        "groupPolicyNumber",
                        "certificateNumber",
                        "locationID",
                        "AnnualPremium",
                        "ledgerEffectiveDate",
                        "ledgerEndDate",
                        "policyStatusID",
                        "productRateID",
                        "quoteID"});
            table23.AddRow(new string[] {
                        "12345",
                        "0",
                        "",
                        "",
                        "0",
                        "0",
                        "2018-08-28T12:12:08.041Z",
                        "2018-08-28T12:12:08.041Z",
                        "0",
                        "0",
                        "0"});
#line 33
 testRunner.Given("I have provided the ledger information to insert or update the data", ((string)(null)), table23, "Given ");
#line 36
 testRunner.When("I send a Put request to insert or update the ledger information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("A success response should be generated and the ledger information should be inser" +
                    "ted or updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
