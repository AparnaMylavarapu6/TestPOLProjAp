// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.BillingAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("BankAccount", SourceFile="Tests\\Billing API\\BankAccount.feature", SourceLine=0)]
    public partial class BankAccountFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BankAccount.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BankAccount", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Fetch Bank Account details when account id is provided", new string[] {
                "happypath"}, SourceLine=4)]
        public virtual void FetchBankAccountDetailsWhenAccountIdIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch Bank Account details when account id is provided", new string[] {
                        "happypath"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "accountid"});
            table1.AddRow(new string[] {
                        "186650"});
#line 6
 testRunner.Given("I have provided the account id to fetch the bank account details", ((string)(null)), table1, "Given ");
#line 9
 testRunner.When("I send a Get request to fetch the bank account details for the provided account i" +
                    "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("A valid success response should be generated with the bank account information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Bank Account details when account id is provided", new string[] {
                "happypath"}, SourceLine=14)]
        public virtual void DeleteBankAccountDetailsWhenAccountIdIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Bank Account details when account id is provided", new string[] {
                        "happypath"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "accountid"});
            table2.AddRow(new string[] {
                        "186649"});
#line 16
 testRunner.Given("I have provided the account id to delete the bank account details", ((string)(null)), table2, "Given ");
#line 19
 testRunner.When("I send a Delete request to fetch the bank account details for the provided accoun" +
                    "t id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("A valid success response should be generated and the bank account details should " +
                    "be succdessfully deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Bank Account Details", new string[] {
                "happypath"}, SourceLine=23)]
        public virtual void PostBankAccountDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Bank Account Details", new string[] {
                        "happypath"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "routingNumber",
                        "accountNumber",
                        "checkNumber",
                        "customerReferenceID",
                        "accountReferenceID",
                        "isPrimary"});
            table3.AddRow(new string[] {
                        "390349534095",
                        "0938453489",
                        "133",
                        "0820483AGJHSADJKL",
                        "9889989DFFGGS4885",
                        "true"});
#line 26
 testRunner.Given("I have provided the bank account details to post the information", ((string)(null)), table3, "Given ");
#line 30
 testRunner.When("I send a post request to insert the bank account details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("A valid success response should be generated and the details should be inserted s" +
                    "uccessfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Insert or update Bank Account Details", new string[] {
                "happypath"}, SourceLine=34)]
        public virtual void InsertOrUpdateBankAccountDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert or update Bank Account Details", new string[] {
                        "happypath"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "routingNumber",
                        "accountNumber",
                        "checkNumber",
                        "customerReferenceID",
                        "accountReferenceID",
                        "isPrimary"});
            table4.AddRow(new string[] {
                        "390349534095",
                        "0938453489",
                        "133",
                        "0820483AGJHSADJKL",
                        "9889989DFFGGS4885",
                        "true"});
#line 37
 testRunner.Given("I have provided the bank account details to insert or update the information", ((string)(null)), table4, "Given ");
#line 41
 testRunner.When("I send a put request to insert or update the bank account details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("A valid success response should be generated and the details should be inserted o" +
                    "r updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
