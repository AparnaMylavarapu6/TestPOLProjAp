// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.BillingAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("BillPayment", SourceFile="Tests\\Billing API\\BillPayment.feature", SourceLine=0)]
    public partial class BillPaymentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BillPayment.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BillPayment", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Fetch Bill Payment by paymentid", new string[] {
                "happypath"}, SourceLine=4)]
        public virtual void FetchBillPaymentByPaymentid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch Bill Payment by paymentid", new string[] {
                        "happypath"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "paymentid"});
            table11.AddRow(new string[] {
                        "1234"});
#line 6
 testRunner.Given("I have entered the payment id to fetch the bill payment information", ((string)(null)), table11, "Given ");
#line 9
 testRunner.When("I send a Get request to fetch the bill payment information with the payment id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("A successful response code should be generated with the bill payment information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Bill Payment by paymentid", new string[] {
                "notimplementedindev"}, SourceLine=14)]
        public virtual void DeleteBillPaymentByPaymentid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Bill Payment by paymentid", new string[] {
                        "notimplementedindev"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "paymentid"});
            table12.AddRow(new string[] {
                        "1234"});
#line 16
 testRunner.Given("I have entered the payment id to delete the bill payment information", ((string)(null)), table12, "Given ");
#line 19
 testRunner.When("I send a Delete request to fetch the bill payment information with the payment id" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("A successful response code should be generated with the bill payment information " +
                    "deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Bill Payment information", new string[] {
                "happypath"}, SourceLine=22)]
        public virtual void PostBillPaymentInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Bill Payment information", new string[] {
                        "happypath"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "paymentid",
                        "paymentMethod",
                        "paymentFrequency",
                        "paymentTransactionType",
                        "residentid",
                        "policyid",
                        "paymentStatus",
                        "paymentDueDate",
                        "amount",
                        "feeCharged",
                        "agreementid",
                        "paymentTermBeginDate",
                        "paymentTermEndDate",
                        "processingSource",
                        "userid",
                        "CustomTermFeeCharge"});
            table13.AddRow(new string[] {
                        "1234",
                        "CC",
                        "Monthly",
                        "0",
                        "1234",
                        "1234",
                        "1",
                        "2018-08-21T14:33:43.090Z",
                        "0",
                        "0",
                        "0",
                        "2018-08-21T14:33:43.090Z",
                        "2018-08-21T14:33:43.090Z",
                        "",
                        "0",
                        "0"});
#line 24
 testRunner.Given("I have entered the bill payment information to be posted", ((string)(null)), table13, "Given ");
#line 28
 testRunner.When("I send a Post request to insert the bill payment information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("A successful response code should be generated with the bill payment information " +
                    "posted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Put Bill Payment information", new string[] {
                "happypath"}, SourceLine=32)]
        public virtual void PutBillPaymentInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Bill Payment information", new string[] {
                        "happypath"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "paymentid",
                        "paymentMethod",
                        "paymentFrequency",
                        "paymentTransactionType",
                        "residentid",
                        "policyid",
                        "paymentStatus",
                        "paymentDueDate",
                        "amount",
                        "feeCharged",
                        "agreementid",
                        "paymentTermBeginDate",
                        "paymentTermEndDate",
                        "processingSource",
                        "userid",
                        "CustomTermFeeCharge"});
            table14.AddRow(new string[] {
                        "1234",
                        "CC",
                        "Monthly",
                        "0",
                        "1234",
                        "1234",
                        "1",
                        "2018-08-21T14:33:43.090Z",
                        "0",
                        "0",
                        "0",
                        "2018-08-21T14:33:43.090Z",
                        "2018-08-21T14:33:43.090Z",
                        "",
                        "0",
                        "0"});
#line 34
 testRunner.Given("I have entered the bill payment information to be inserted or updated", ((string)(null)), table14, "Given ");
#line 38
 testRunner.When("I send a Put request to insert or update the bill payment information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("A successful response code should be generated with the bill payment information " +
                    "inserted or updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
