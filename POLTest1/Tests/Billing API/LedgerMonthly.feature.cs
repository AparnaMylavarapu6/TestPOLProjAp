// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.BillingAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("LedgerMonthly", SourceFile="Tests\\Billing API\\LedgerMonthly.feature", SourceLine=0)]
    public partial class LedgerMonthlyFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LedgerMonthly.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LedgerMonthly", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Fetch monthly ledger data when ledgerMonthlyid is provided", new string[] {
                "happypath"}, SourceLine=4)]
        public virtual void FetchMonthlyLedgerDataWhenLedgerMonthlyidIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fetch monthly ledger data when ledgerMonthlyid is provided", new string[] {
                        "happypath"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgermonthlyid"});
            table24.AddRow(new string[] {
                        "12345"});
#line 6
 testRunner.Given("I have provided the ledgerMonthlyid to fetch the monthly ledger data", ((string)(null)), table24, "Given ");
#line 9
 testRunner.When("I send a Get request to fetch the montly ledger information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then("A success response should be generated and the monthly ledger information should " +
                    "be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete monthly ledger data when ledgerMonthlyid is provided", new string[] {
                "notimplementedindev"}, SourceLine=13)]
        public virtual void DeleteMonthlyLedgerDataWhenLedgerMonthlyidIsProvided()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete monthly ledger data when ledgerMonthlyid is provided", new string[] {
                        "notimplementedindev"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgermonthlyid"});
            table25.AddRow(new string[] {
                        "12345"});
#line 15
 testRunner.Given("I have provided the ledgerMonthlyid to delete the monthly ledger data", ((string)(null)), table25, "Given ");
#line 18
 testRunner.When("I send a Delete request to delete the montly ledger information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("A success response should be generated and the monthly ledger information should " +
                    "be deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Monthly ledger data", new string[] {
                "happypath"}, SourceLine=21)]
        public virtual void PostMonthlyLedgerData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Monthly ledger data", new string[] {
                        "happypath"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgerMonthlyID",
                        "ledgerID",
                        "premium",
                        "ledgerStartDate",
                        "ledgerEndDate",
                        "excludeLedger",
                        "commission",
                        "carrierCommunicationSent",
                        "ledgerGeneratedDate",
                        "excludeReason",
                        "serviceFee"});
            table26.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "2018-08-28T12:13:31.087Z",
                        "2018-08-28T12:13:31.087Z",
                        "true",
                        "0",
                        "2018-08-28T12:13:31.087Z",
                        "2018-08-28T12:13:31.087Z",
                        "0",
                        "0"});
#line 23
 testRunner.Given("I have provided the monthly ledger data to post the data", ((string)(null)), table26, "Given ");
#line 26
 testRunner.When("I send a Post request to insert the monthly ledger data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("A success response code should be generated and the monthly ledger data should be" +
                    " successfully inserted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Insert or Update Monthly ledger data", new string[] {
                "happypath"}, SourceLine=29)]
        public virtual void InsertOrUpdateMonthlyLedgerData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insert or Update Monthly ledger data", new string[] {
                        "happypath"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgerMonthlyID",
                        "ledgerID",
                        "premium",
                        "ledgerStartDate",
                        "ledgerEndDate",
                        "excludeLedger",
                        "commission",
                        "carrierCommunicationSent",
                        "ledgerGeneratedDate",
                        "excludeReason",
                        "serviceFee"});
            table27.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "2018-08-28T12:13:31.087Z",
                        "2018-08-28T12:13:31.087Z",
                        "true",
                        "0",
                        "2018-08-28T12:13:31.087Z",
                        "2018-08-28T12:13:31.087Z",
                        "0",
                        "0"});
#line 31
 testRunner.Given("I have provided the monthly ledger data to insert or update the data", ((string)(null)), table27, "Given ");
#line 34
 testRunner.When("I send a Put request to insert or update the monthly ledger data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("A success response code should be generated and the monthly ledger data should be" +
                    " successfully inserted or updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
