// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.BillingAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Billing", SourceFile="Tests\\Billing API\\Billing.feature", SourceLine=0)]
    public partial class BillingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Billing.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Billing", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get Billing information by billing id", new string[] {
                "happypath"}, SourceLine=4)]
        public virtual void GetBillingInformationByBillingId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Billing information by billing id", new string[] {
                        "happypath"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "billingid"});
            table5.AddRow(new string[] {
                        "4197178"});
#line 6
 testRunner.Given("I have entered the billing id to fetch the billing information", ((string)(null)), table5, "Given ");
#line 10
 testRunner.When("I send a Get request to fetch the billing information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "billingID",
                        "policyID",
                        "residentID",
                        "paymentMethod",
                        "paymentFrequency",
                        "billingDate",
                        "nextBillingDate",
                        "annualPremium",
                        "statementCount"});
            table6.AddRow(new string[] {
                        "4197178",
                        "6130671",
                        "79049094",
                        "1",
                        "4",
                        "2018-09-07T00:00:00",
                        "2019-09-02T00:00:00",
                        "198.101",
                        "1"});
#line 11
 testRunner.Then("A successful response code should be generated with the billing information", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Billing information by billing id", new string[] {
                "notimplementedindev"}, SourceLine=15)]
        public virtual void DeleteBillingInformationByBillingId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Billing information by billing id", new string[] {
                        "notimplementedindev"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "billingid"});
            table7.AddRow(new string[] {
                        "1234"});
#line 17
 testRunner.Given("I have entered the billing id to delete the billing information", ((string)(null)), table7, "Given ");
#line 21
 testRunner.When("I send a Delete request to delete the billing information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then("A successful response code should be generated with the billing information delet" +
                    "ed successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Billing information", new string[] {
                "happypath"}, SourceLine=24)]
        public virtual void PostBillingInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Billing information", new string[] {
                        "happypath"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "billingid",
                        "residentid",
                        "policyid",
                        "paymentmethod",
                        "paymentfrequency",
                        "billingdate",
                        "nextbillingdate",
                        "annualpremium",
                        "statementcount"});
            table8.AddRow(new string[] {
                        "4197178",
                        "79049094",
                        "6130671",
                        "1",
                        "4",
                        "2018-09-07T14:33:33.679Z",
                        "2019-09-02T14:33:33.679Z",
                        "198.00",
                        "1"});
#line 26
 testRunner.Given("I have entered the billing information to be posted", ((string)(null)), table8, "Given ");
#line 30
 testRunner.When("I send a Post request to insert the billing information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "billingid"});
            table9.AddRow(new string[] {
                        "4197186"});
#line 31
 testRunner.Then("A successful response code should be generated with the billing information inser" +
                    "ted successfully", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Put Billing information", new string[] {
                "happypath"}, SourceLine=35)]
        public virtual void PutBillingInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put Billing information", new string[] {
                        "happypath"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "billingid",
                        "residentid",
                        "policyid",
                        "paymentmethod",
                        "paymentfrequency",
                        "billingdate",
                        "nextbillingdate",
                        "annualpremium",
                        "statementcount"});
            table10.AddRow(new string[] {
                        "4199136",
                        "78851183",
                        "6099770",
                        "1",
                        "2",
                        "2018-09-06T14:33:33.679Z",
                        "2018-09-21T14:33:33.679Z",
                        "180",
                        "1"});
#line 37
 testRunner.Given("I have entered the billing information to be inserted or updated", ((string)(null)), table10, "Given ");
#line 41
 testRunner.When("I send a Put request to insert or update the billing information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("A successful response code should be generated with the billing information inser" +
                    "ted or updated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
