// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.BillingAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("SubmitLedger", SourceFile="Tests\\Billing API\\SubmitLedger.feature", SourceLine=0)]
    public partial class SubmitLedgerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SubmitLedger.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SubmitLedger", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SubmitLedger Information", new string[] {
                "mytag"}, SourceLine=3)]
        public virtual void SubmitLedgerInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SubmitLedger Information", new string[] {
                        "mytag"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "ledgerID",
                        "groupPolicyID",
                        "groupPolicyNumber",
                        "certificateNumber",
                        "locationID",
                        "policyStatusID",
                        "productRateID",
                        "quoteID",
                        "annualBillingEffDate",
                        "annualBillingEndDate",
                        "excludeLedger",
                        "commission",
                        "carrierCommunicationSent",
                        "ledgerGeneratedDate",
                        "excludeReason",
                        "serviceFeeId"});
            table28.AddRow(new string[] {
                        "20",
                        "1",
                        "ANC611489CA1234",
                        "04AN000DS",
                        "19761",
                        "1",
                        "2",
                        "27",
                        "2018-08-01 00:00:00.000",
                        "2019-08-21 00:00:00.000",
                        "0",
                        "0",
                        "2018-08-02 00:00:00.000",
                        "2018-07-30 00:00:00.000",
                        "1",
                        "0"});
#line 5
 testRunner.Given("I have provided Ledger Information.", ((string)(null)), table28, "Given ");
#line 8
 testRunner.When("I send a post request to insert the Ledger information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("A valid successful response should be generated with the Ledger data posted succe" +
                    "ssfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
