// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.SettingsAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Settings", SourceFile="Tests\\Settings API\\Settings.feature", SourceLine=0)]
    public partial class SettingsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Settings.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Settings", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify the GET request of Settings API using SettingsID", new string[] {
                "happypath"}, SourceLine=3)]
        public virtual void ToVerifyTheGETRequestOfSettingsAPIUsingSettingsID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify the GET request of Settings API using SettingsID", new string[] {
                        "happypath"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "SettingsID"});
            table126.AddRow(new string[] {
                        "289"});
#line 6
 testRunner.Given("Provided with the valid SettingsID.", ((string)(null)), table126, "Given ");
#line 9
 testRunner.When("I send a GET request to fetch settings details.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.Then("The valid settings details should be displayed.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify the Delete request of Settings API using SettingsID", new string[] {
                "happypath"}, SourceLine=12)]
        public virtual void ToVerifyTheDeleteRequestOfSettingsAPIUsingSettingsID()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify the Delete request of Settings API using SettingsID", new string[] {
                        "happypath"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "SettingsID"});
            table127.AddRow(new string[] {
                        "2"});
#line 15
 testRunner.Given("Provided with the valid SettingsID to be deleted.", ((string)(null)), table127, "Given ");
#line 18
 testRunner.When("I send a DELETE request to Delete settings details.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("The settings details should be deleted.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify the POST request of Settings API", new string[] {
                "happypath"}, SourceLine=21)]
        public virtual void ToVerifyThePOSTRequestOfSettingsAPI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify the POST request of Settings API", new string[] {
                        "happypath"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityId",
                        "EntityType",
                        "EntityText",
                        "Address",
                        "city",
                        "state",
                        "zip",
                        "UserId",
                        "ModifiedById"});
            table128.AddRow(new string[] {
                        "601244",
                        "1",
                        "BlueStone Lofts",
                        "101 Summit St",
                        "Duluth",
                        "CA",
                        "55803",
                        "-1",
                        "0"});
#line 23
 testRunner.Given("I have provided Entity Settings details.", ((string)(null)), table128, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "settingsID",
                        "settingType",
                        "settingValue"});
            table129.AddRow(new string[] {
                        "283",
                        "HO4",
                        "true"});
#line 26
 testRunner.And("Provided with the new SettingsInfo details.", ((string)(null)), table129, "And ");
#line 29
 testRunner.When("I send a POST request to add new settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("The valid settings details should be saved.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify the PUT request of Settings API", new string[] {
                "happypath"}, SourceLine=32)]
        public virtual void ToVerifyThePUTRequestOfSettingsAPI()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify the PUT request of Settings API", new string[] {
                        "happypath"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityId",
                        "EntityType",
                        "EntityText",
                        "Address",
                        "city",
                        "state",
                        "zip",
                        "UserId",
                        "ModifiedById"});
            table130.AddRow(new string[] {
                        "601234",
                        "1",
                        "BlueStone Lofts",
                        "101 Summit St",
                        "Duluth",
                        "CA",
                        "55803",
                        "-1",
                        "0"});
#line 34
 testRunner.Given("I have provided Entity Settings details for PUT Request.", ((string)(null)), table130, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "settingsID",
                        "settingType",
                        "settingValue"});
            table131.AddRow(new string[] {
                        "291",
                        "POL",
                        "false"});
#line 37
 testRunner.And("Provided with the new SettingsInfo details for PUT.", ((string)(null)), table131, "And ");
#line 40
 testRunner.When("I send a PUT request to update new settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("The valid settings details should be updated.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify the GET request of Settings API using EntityID and EntityType", new string[] {
                "happypath"}, SourceLine=43)]
        public virtual void ToVerifyTheGETRequestOfSettingsAPIUsingEntityIDAndEntityType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify the GET request of Settings API using EntityID and EntityType", new string[] {
                        "happypath"});
#line 44
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityID",
                        "EntityType"});
            table132.AddRow(new string[] {
                        "609249",
                        "Property"});
            table132.AddRow(new string[] {
                        "611489",
                        "Company"});
#line 46
 testRunner.Given("Provided with the valid EntityID and EntityType.", ((string)(null)), table132, "Given ");
#line 50
 testRunner.When("I send a GET request to fetch settings details EntityID and EntityType.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("The valid settings details should be displayed based on EntityID and EntityType.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("To Verify the GET request of Settings API using PropertyID and PropertyType", new string[] {
                "happypath"}, SourceLine=53)]
        public virtual void ToVerifyTheGETRequestOfSettingsAPIUsingPropertyIDAndPropertyType()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To Verify the GET request of Settings API using PropertyID and PropertyType", new string[] {
                        "happypath"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyID",
                        "PropertyType"});
            table133.AddRow(new string[] {
                        "611489",
                        "LeasingDesk"});
            table133.AddRow(new string[] {
                        "2913444",
                        "Onesite"});
            table133.AddRow(new string[] {
                        "6717648",
                        "Yardi"});
#line 56
 testRunner.Given("Provided with the valid PropertyID and PropertyType.", ((string)(null)), table133, "Given ");
#line 61
 testRunner.When("I send a GET request to fetch settings details PropertyID and PropertyType.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("The valid settings details should be displayed based on PropertyID and PropertyTy" +
                    "pe.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
