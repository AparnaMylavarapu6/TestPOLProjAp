// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace POLTest1.Tests.PMSIntegrationAPI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("PMSPolicies", SourceFile="Tests\\PMS Integration API\\PMSPolicies.feature", SourceLine=0)]
    public partial class PMSPoliciesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PMSPolicies.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PMSPolicies", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Get PMS Policy by PolicyId", new string[] {
                "needtorunfordev"}, SourceLine=4)]
        public virtual void GetPMSPolicyByPolicyId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get PMS Policy by PolicyId", new string[] {
                        "needtorunfordev"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid"});
            table35.AddRow(new string[] {
                        "1234"});
#line 7
testRunner.Given("I have entered a valid PolicyId", ((string)(null)), table35, "Given ");
#line 11
testRunner.When("I send a valid GET request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 12
testRunner.Then("The policy details should be displayed successfully.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Delete Policy by PolicyId", new string[] {
                "notimplementedindev"}, SourceLine=17)]
        public virtual void DeletePolicyByPolicyId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete Policy by PolicyId", new string[] {
                        "notimplementedindev"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyid",
                        "thirdpartypolicyid"});
            table36.AddRow(new string[] {
                        "2345",
                        "3456"});
            table36.AddRow(new string[] {
                        "1234",
                        ""});
#line 20
testRunner.Given("I have entered a valid policyid for Delete", ((string)(null)), table36, "Given ");
#line 26
testRunner.When("I send a DELETE request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
testRunner.Then("the policy information should be deleted successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Post Policy Information", new string[] {
                "needtorunfordev"}, SourceLine=33)]
        public virtual void PostPolicyInformation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post Policy Information", new string[] {
                        "needtorunfordev"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "policyID",
                        "policyStatus",
                        "policyNumber",
                        "policyTitle",
                        "effectiveDate",
                        "expiryDate",
                        "cancelDate",
                        "PolicyLiabilityLimit",
                        "isCorporate",
                        "policyActionType"});
            table37.AddRow(new string[] {
                        "1234",
                        "Active",
                        "87666666",
                        "RentersInsurance",
                        "2018-01-18 22:54:54.803",
                        "2019-01-18 22:54:54.803",
                        "",
                        "100000",
                        "false",
                        "New"});
#line 35
testRunner.Given("I have provided the Policy information", ((string)(null)), table37, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "leaseId",
                        "leaseStartDate",
                        "leaseEndDate",
                        "actualMoveIn",
                        "actualMoveOut"});
            table38.AddRow(new string[] {
                        "123445",
                        "2018-01-18 22:54:54.803",
                        "2019-01-18 22:54:54.803",
                        "2018-01-18 22:54:54.803",
                        "2019-01-18 22:54:54.803"});
#line 39
testRunner.And("I have provided the lease information", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "carrierId",
                        "carrierName"});
            table39.AddRow(new string[] {
                        "233",
                        "LeasingDesk(eRenterPlan)"});
#line 43
testRunner.And("I have provided the Carrier information", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "residentHOHID",
                        "residentMemberID",
                        "residentHOHFirstNa - me",
                        "residentHOHLastName"});
            table40.AddRow(new string[] {
                        "t2344444",
                        "r8776666",
                        "Sailaja",
                        "S"});
#line 47
testRunner.And("I have provided the resident information", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "externalUnitId"});
            table41.AddRow(new string[] {
                        "45645232343"});
#line 51
testRunner.And("I have provided the unit information", ((string)(null)), table41, "And ");
#line 55
testRunner.When("I send a POST request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
testRunner.Then("A valid response should be generated for POST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
testRunner.When("I send a PUT request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
testRunner.Then("A valid response should be generated for PUT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Return Policy Details List", new string[] {
                "needtorunfordev"}, SourceLine=63)]
        public virtual void ReturnPolicyDetailsList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return Policy Details List", new string[] {
                        "needtorunfordev"});
#line 64
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyType",
                        "PropertyId"});
            table42.AddRow(new string[] {
                        "OneSite",
                        "120"});
            table42.AddRow(new string[] {
                        "LeasingDesk",
                        "120"});
            table42.AddRow(new string[] {
                        "Yardi",
                        "120"});
#line 66
testRunner.Given("I have entered the valid PropertyType and PropertyId", ((string)(null)), table42, "Given ");
#line 72
testRunner.When("I send a valid GET request with PropertyType and PropertyId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 73
testRunner.Then("List of policies in the property should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Return Occupancy Details", new string[] {
                "needtorunfordev"}, SourceLine=78)]
        public virtual void ReturnOccupancyDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Return Occupancy Details", new string[] {
                        "needtorunfordev"});
#line 79
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "PropertyType",
                        "PropertyId"});
            table43.AddRow(new string[] {
                        "OneSite",
                        "120"});
            table43.AddRow(new string[] {
                        "Yardi",
                        "120"});
#line 81
testRunner.Given("I have entered the valid PropertyType and PropertyId to fetch the occupancy detai" +
                    "ls", ((string)(null)), table43, "Given ");
#line 88
testRunner.When("I send a valid GET request to fetch the occupancy details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
testRunner.Then("The occupancy details should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
